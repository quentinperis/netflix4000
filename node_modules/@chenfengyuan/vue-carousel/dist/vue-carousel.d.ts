interface VueCarouselItem {
    active: boolean;
    bottom: boolean;
    content: any;
    left: boolean;
    raw: any;
    right: boolean;
    sliding: boolean;
    toBottom: boolean;
    toLeft: boolean;
    toRight: boolean;
    toTop: boolean;
    top: boolean;
}
declare type VueCarouselList = VueCarouselItem[];
declare const _default: import("vue").DefineComponent<{
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    controls: {
        type: (BooleanConstructor | StringConstructor)[];
        default: string;
    };
    data: {
        type: ArrayConstructor;
        default: undefined;
    };
    direction: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    indicators: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    indicatorTrigger: {
        type: StringConstructor;
        default: string;
    };
    indicatorType: {
        type: StringConstructor;
        default: string;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    pauseOnEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    slideOnSwipe: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {
    endX: number;
    endY: number;
    index: number;
    list: VueCarouselList;
    onVisibilityChange: () => void;
    playing: boolean;
    sliding: boolean;
    startX: number;
    startY: number;
    timeout: number;
}, {}, {
    init(): void;
    play(): void;
    cycle(): void;
    pause(): void;
    stop(): void;
    prev(done?: (() => void) | undefined): void;
    next(done?: (() => void) | undefined): void;
    slide(index: number, reverse?: boolean, done?: () => void): void;
    slideTo(index: number, done?: (() => void) | undefined): void;
    slideStart(event: PointerEvent | TouchEvent | MouseEvent): void;
    slideMove(event: PointerEvent | TouchEvent | MouseEvent): void;
    slideEnd(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("slide" | "slid")[], "slide" | "slid", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    controls: {
        type: (BooleanConstructor | StringConstructor)[];
        default: string;
    };
    data: {
        type: ArrayConstructor;
        default: undefined;
    };
    direction: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    indicators: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    indicatorTrigger: {
        type: StringConstructor;
        default: string;
    };
    indicatorType: {
        type: StringConstructor;
        default: string;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    pauseOnEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    slideOnSwipe: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onSlide?: ((...args: any[]) => any) | undefined;
    onSlid?: ((...args: any[]) => any) | undefined;
}, {
    data: unknown[];
    autoplay: boolean;
    controls: string | boolean;
    direction: string;
    duration: number;
    indicators: string | boolean;
    indicatorTrigger: string;
    indicatorType: string;
    interval: number;
    pauseOnEnter: boolean;
    slideOnSwipe: boolean;
    tag: string;
}>;
export default _default;
